#!/bin/bash

# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset

# End Boilerplate

slurm_folder_check() {
	#check for failed_slurms folder and create if needed
	if [[ -z $(find . -maxdepth 1 -mindepth 1 -name 'failed_slurms') ]] ; then
		mkdir failed_slurms
		printf "Made failed_slurms folder\n" >&3
	else
		printf "Found folder\n" >&3
	fi
}

parse_error_nodes() {	#substitute each line with the node number in each line, and write node numbers to list
	error_node_list=$(sed -n 's/.*compute\([0-9][0-9][0-9]\).*/\1/p' error_list | sed '$!N; /^\(.*\)\n\1$/!P; D')
	#printf "Adding node(s)  to exclude list..."
	#printf "Adding node(s) $(jq -Rs . <error_node_list) to exclude list..."
}

get_current_exclude_list() {
	#reading in exclude line from runVASP.sh
	excludeString=$(grep '\-\-exclude' runVASP.sh)	#get line with --exclude
	excludeString=${excludeString#'#SBATCH --exclude=compute['}	#remove front part
	excludeString=${excludeString%]}	# remove back bracket, leaving numbers or ranges with commas
	IFS=',' read -r -a nodeArray <<< "${excludeString}"
}

rebuild_exclude_list() {

	#add nodes from error_node_list to end of nodeArray
	while IFS= read -r line || [ -n "${line}" ]
	do
		nodeArray+=("${line}")
	done < <(printf '%s\n' "${error_node_list}")

	IFS=',';new_exclude_line="#SBATCH --exclude=compute[${nodeArray[*]// /|}]"	#convert array to string delimited with "," and add surrounding text
	sed -i 's/.*--exclude.*/'"${new_exclude_line}"'/' runVASP.sh	#replace exclude line in runVASP.sh with new_exclude_line
	printf "%s\n" "Updated list of excluded nodes in $(pwd)"
}

slurm_folder_check	# check for failed_slurms failed folder, create it if not found

# move slurm file into folder
cp "${slurm_file}" failed_slurms
rm "${slurm_file}"

# get node numbers from error_list, get current exclude line, add node numbers, and replace exclude line in runVASP
parse_error_nodes
get_current_exclude_list
rebuild_exclude_list