#!/bin/bash

# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset

# End Boilerplate

#TODO:
#Have master exclude list somewhere to save time? Clear every 6 hours?

run_and_catch_job() {
	sbatch_output=$(sbatch runVASP.sh)
	printf "%s\n" "${sbatch_output}"
	printf "%s" "${sbatch_output#'Submitted batch job '}" > current_job
}

add_to_crontab() {
	(crontab -l ; echo "* * * * * cd $(pwd) && rerunVASP") | awk '!x[$0]++' | crontab -
	job_number=$(cat current_job)
	printf "%s\n" "Added job ${job_number} to crontab"
}

remove_from_crontab() {
	crontab -l | grep -v "$(pwd)" | crontab -
	printf "%s\n" "Removed job ${job_number} from crontab"
}

update_and_run_if_error() {
	printf 'Checking slurm for errors ... ' >&3
	grep 'rc_verbs_iface.c:69   send completion with error: remote invalid request error' "${slurm_file}" > error_list 2> /dev/null || :	# find lines with error code

	if [[ -s error_list ]] ; then
		printf "found errors\n" >&3
		source update_exclude_list
		run_and_catch_job
		add_to_crontab 
	else
		printf "no errors found\n" >&3
		source continueVASP
		printf "Checking if ran out of steps or got stuck ... "
		if [[ -n "${max_step_line}" ]] ; then
			printf "ran out of steps\n"
			move_and_clean_up_files
			printf "%s\n" "Continuing job that ran out of steps in $(pwd)"
			run_and_catch_job
			add_to_crontab
		elif [[ -n "${stuck_line}" ]] ; then
			printf "got stuck\n"
			move_and_clean_up_files
			printf "%s\n" "Continuing job that got stuck in $(pwd)"
			run_and_catch_job
			add_to_crontab
		else
			printf "did not run out of steps or get stuck\n"
			printf "%s\n" "Job in $(pwd) assumed completed" 
			remove_from_crontab
		fi
	fi
}

check_if_running() { # Use current_job to check if running. 
	printf "Checking for job number ... " >&3
	if [[ -n "${current_job_file}" ]] ; then
		printf "found job number\n" >&3
		job_number=$(cat current_job)
		job_status=$(squeue -u cgerber | grep -q "${job_number}" 2> /dev/null; echo $?)
	else
		printf "no job number found\n" >&3
		job_status="2"
	fi
}

check_input_files() {
	INCAR_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "INCAR")
	KPOINTS_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "KPOINTS")
	POSCAR_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "POSCAR")
	POTCAR_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "POTCAR")
	runVASP_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "runVASP.sh")

	if [[ -n "${INCAR_file}" ]] && [[ -n "${KPOINTS_file}" ]] && [[ -n "${POSCAR_file}" ]] && [[ -n "${POTCAR_file}" ]] && [[ -n "${runVASP_file}" ]] ; then
		echo "0"
	else
		echo "1"
	fi
}

conditional_run() {
	check_if_running
	printf "Checking job status ... " >&3
	if [[ "${job_status}" == 0 ]] ; then
		printf "%s\n" "Job ${job_number} is already running" >&3
	elif [[ "${job_status}" == 1 ]] ; then
		printf "job is inactive\n" >&3
		update_and_run_if_error
	elif [[ "${job_status}" == 2 ]] ; then
		printf "could not check status, no job number found\n" >&3
		printf "Checking for slurm file ... " >&3
		if [[ -n "${slurm_file}" ]] ; then
			printf "%s\n" "found slurm" >&3
			update_and_run_if_error
		else
			printf "%s\n" "no slurm found" >&3
			printf "Checking for input files ... " >&3
			if [[ $(check_input_files) == 0 ]] ; then
				printf "%s\n" "found input files" >&3
				printf "%s\n" "Running new job in $(pwd)"
				run_and_catch_job
				add_to_crontab
			else
				printf "%s\n" "no input files found" >&3
				run_in_folders
			fi
		fi
	fi
}

find_slurm_and_job() {

	slurm_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "slurm*")	#find slurm file
	current_job_file=$(find . -maxdepth 1 -mindepth 1 -type f -name "current_job")
}

run_in_folders() {

	printf "%s\n" "No slurm file found in $(basename "$(pwd)")" >&3
	folder_list=$(find . -maxdepth 1 -mindepth 1 -type d)
	if [[ -n "${folder_list}" ]] ; then
		printf "Checking folders...\n" >&3
		while IFS="" read -r folder || [ -n "${folder}" ] ; do
			if [[ ! "${folder}" == *slurm* ]] && [[ ! "${folder}" == *run* ]] ; then
				cd "${folder}"
				find_slurm_and_job
				#if [[ -n "${slurm_file}" ]] ; then conditional_run ; else printf "No slurm file found in $(basename ${folder})\n" ; fi
				conditional_run
				cd ../
			else
				printf "%s\n" "Skipping folder $(basename "${folder}")" >&3
			fi
		done < <(printf '%s\n' "${folder_list}")
	else
		printf "No slurm file or folders found" >&3
	fi
}

verbose=

if [[ -n "${1+x}" ]] ; then
	case "$1" in
		-v|--v|--ve|--ver|--verb|--verbo|--verbos|--verbose)
		verbose=1
		shift ;;
	esac
fi

if [ "${verbose}" = 1 ]; then
    exec 4>&2 3>&1
else
    exec 4>/dev/null 3>/dev/null
fi

find_slurm_and_job

#echo "Slurm file: ${slurm_file}"
#echo "Current job file: ${current_job_file}"

conditional_run
